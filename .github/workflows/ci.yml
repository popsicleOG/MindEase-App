name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../MindEaseFrontend && npm install
        
    - name: Run backend tests
      run: |
        cd backend
        npm test
        
    - name: Run frontend tests
      run: |
        cd MindEaseFrontend
        npm test
        
    - name: Run accessibility tests
      run: |
        cd MindEaseFrontend
        npm test -- --testPathPattern=accessibility.test.js

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../MindEaseFrontend && npm install
        
    - name: Lint backend
      run: |
        cd backend
        npm run lint
        
    - name: Lint frontend
      run: |
        cd MindEaseFrontend
        npm run lint
        
    - name: Format check
      run: |
        cd backend
        npm run format -- --check
        cd ../MindEaseFrontend
        npm run format -- --check

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../MindEaseFrontend && npm install
        
    - name: Run security audit
      run: |
        npm audit
        cd backend && npm audit
        cd ../MindEaseFrontend && npm audit
        
    - name: Check for vulnerabilities
      run: |
        npm audit --audit-level=high
        cd backend && npm audit --audit-level=high
        cd ../MindEaseFrontend && npm audit --audit-level=high

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../MindEaseFrontend && npm install
        
    - name: Build backend
      run: |
        cd backend
        npm run build || echo "No build script found"
        
    - name: Build frontend
      run: |
        cd MindEaseFrontend
        npm run build || echo "No build script found"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          backend/dist/
          MindEaseFrontend/build/
        if-no-files-found: ignore

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: Deploy to Heroku staging app
        # heroku container:push web -a your-staging-app
        # heroku container:release web -a your-staging-app

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: Deploy to Heroku production app
        # heroku container:push web -a your-production-app
        # heroku container:release web -a your-production-app

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)
        
    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "Production deployment failed!"
        # Add notification logic here (Slack, email, etc.) 